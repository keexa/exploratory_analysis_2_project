hist(log(training$Superplasticizer))
log(training$Superplasticizer)
3.library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
colnames(training)
grep("IL", colnames(training))
indices <- grep("IL", colnames(training))
colnames(training)[indices]
indices <- grep("^IL", colnames(training))
colnames(training)[indices]
cor(training)
training
cor(training[,-58])
len(training)
length(training)
cor(training[,-131])
size(training)
sizes(training)
length(traning)[1]
length(traning)[2]
training
colnames(training)
colnames(testing)
cor(training[,-130])
training[,-130]
training[,-131]
preProc <- preProc(log10(training[,-131] + 1), method="pca")
preProc <- preProcess(log10(training[,-131] + 1), method="pca")
preProc <- preProcess(log10(training[,-131] + 1), method="pca", pcaComp=2)
preProc <- preProcess(log10(training[,-131]), method="pca", pcaComp=2)
training
training$diagnosis
factor(training$diagnosis)
v <- dummyVars(. ~ diagnosis, data=training)
v <- dummyVars(training ~ diagnosis, data=training)
v <- dummyVars(training$Genotype
~ diagnosis, data=training)
v <- dummyVars(training$Genotype~ diagnosis, data=training)
v <- dummyVars(Genotype~ diagnosis, data=training)
v
preProcess(training[,-1])
training[,-131]
preProcess(training[,-131])
preProcess(training[,-131])
table(training)
table(training$diagnosis)
dummyVars(training$Genotype ~ training$diagnosis)
dummyVars(training$Genotype ~ training$diagnosis, data=training)
dummyVars(Genotype ~ diagnosis, data=training)
head(predict(dummies, newdata=training))
dummies <- dummyVars(Genotype ~ diagnosis, data=training)
head(predict(dummies, newdata=training))
training$diagnosis <- dummies
dummies
training[,-131]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
as.numeric(levels(factor(testing$diagnosis)))
as.numeric(levels(testing$diagnosis))
levels(training$diagnosis)
as.numeric(levels(training$diagnosis))
as.numeric(levels(training$diagnosis))
factor(training$diagnosis)
as.numeric(levels(factor(training$diagnosis)))
as.numeric(levels(as.factor(training$diagnosis)))
dummies <- dummyVars( ~ diagnosis, data=training)
dummies
dummies$vars
dummies$vars
dummies$call
training$diagnosis <- dummies
dummies
dummies$vars
dummies$vars[
"diagnosis"]
dummies$vars
dummies$vars[1]
dummies$vars
dummies
dummies
dummies$terms
predict(dummies, data=training)
predict(dummies, newdata=training)
predict(dummies, newdata=training)
newVars <-predict(dummies, newdata=training)
training$diagnosis <- newVars
training$diagnosis
head(training)
cor(training)
cor(training[,-141])
cor(training[,-1311])
cor(training[,-131])
preproc <- preProcess(log10(training[,-131] + 1, method="pca", pcaComp=2))
preproc <- preProcess(log10(training[,-131] + 1), method="pca", pcaComp=2))
preproc <- preProcess(log10(training[,-131] + 1), method="pca", pcaComp=2)
preproc <- preProcess(log10(training[,-131] + 1), method="pca", pcaComp=2)
prcomp(training)
prcomp(training[,-131])
preproc <- preProcess(log10(training[,-131] + 1), method="pca", pcaComp=2)
preproc <- preProcess(log10(training[,-131] + 1), method="pca", pcaComp=2)
warnings()
predNames <- grep("^IL", colnames(training))
predNames
predNamesIndices <- grep("^IL", colnames(training))
predNames <- training[predNamesIndices]
predNames
predNames <- colnames(training)[predNamesIndices]
predNames
myTraining <- training[predNames]
myTraining
head(myTraining)
cor(myTraining)
preProcess(log10(myTraining[,-131] + 1), method="pca", pcaComp=2)
preProcess(log10(myTraining[,-131] + 1), metho="pca", pcaComp=2)
preProcess(log10(myTraining[,-131] + 1), method="pca", pcaComp=2)
preProcess(log10(myTraining + 1), method="pca", pcaComp=2)
myTraining
preProcess(myTraining , method="pca", pcaComp=2)
preProcess(log10(myTraining + 1) , method="pca", pcaComp=2)
preProcess(myTraining , method="pca", pcaComp=2)
preProcess(log10(myTraining) , method="pca", pcaComp=2)
preProcess(myTraining, method="pca", pcaComp=2)
d <- preProcess(myTraining, method="pca", pcaComp=2)
d
?preProcess
d <- preProcess(myTraining, thresh=90, method="pca")
d <- preProcess(myTraining, thresh=0.90, method="pca")
d <- preProcess(myTraining, thresh=90, method="pca")
d <- preProcess(myTraining, thresh=0.90, method="pca")
d
d <- preProcess(myTraining, thresh=90, method="pca")
d
d <- preProcess(myTraining, thresh=0.90, method="pca")
d
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
indices <- grep("^IL", training)
indices
indices <- grep("^IL", colnames(training)
indices <- grep("^IL", colnames(training))
indices <- grep("^IL", colnames(training))
indices
colnames(training)[indices]
newNames <- colnames(training)[indices]
myTraining <- training[newNames]
myTraining
head(myTraining)
mod1 <- train()
mod1 <- train()
myTraining
names(training)
myTraining
myTraining$Genotype <- training$Genotype
myTraining
train(Genotype ~ ., data = myTraining, method="glm")
library(caret)
train(Genotype ~ ., data = myTraining, method="glm")
set.seed(333)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
indices <- grep("^IL", colnames(training))
indices
newCols <- colnames(training)[indices]
myTraining <- training[newCols]
myTraining$diagnosis <- training$diagnosis
lm(diagnosis ~ ., data=myTraining)
head(myTraining)
lm(diagnosis ~ ., data=myTraining)
mod <- train(diagnosis ~ ., method="glm", preProcess="pca", data = myTraining)
install.packages("e1081")
install.packages("e1071")
mod <- train(diagnosis ~ ., method="glm", preProcess="pca", data = myTraining)
confusionMatrix(diagnosis, predict(mod, testing))
confusionMatrix(mod$diagnosis, predict(mod, testing))
myTesting <- testing[newCols]
confusionMatrix(mod$diagnosis, predict(mod, myTesting))
myTesting$diagnosis <- testing$diagnosis
confusionMatrix(mod$diagnosis, predict(mod, myTesting))
head(myTesting)
head(myTraining)
head(myTesting)
mod <- train(diagnosis ~ ., method="glm", preProcess="pca", data = myTraining)
confusionMatrix(myTesting$diagnosis, predict(mod, myTesting))
mod <- train(diagnosis ~ ., method="glm", preProcess="pca", data = myTraining)
?train
modFit <- train(myTraining$diagnosis ~., method="glm", data=myTraining)
testPc <- predict(training, log10(myTesting[,]))
mod <- train(myTraining$diagnosis ~., method="glm", data=myTraining)
confusionMatrix(myTesting$diagnosis, predict(mod, myTesting))
?train
?xyploy
?xyplot
library("lattice")
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.lmline
?lines
?points
?axis
?panel.lmline
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
print(p)
?print.trellis()
?par
?splom
?trellis.par.set
library("ggplo2")
library("ggplot2")
?ggplot2
?ggplot
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
shiny::runApp('Desktop/my_project')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='keexa',
token='6807B369CA25F3D7084A7DD2FA1ECE7A',
secret='<SECRET>')
shinyapps::setAccountInfo(name='keexa',
token='6807B369CA25F3D7084A7DD2FA1ECE7A',
secret='<SECRET>')
shinyapps::setAccountInfo(name='keexa',
token='6807B369CA25F3D7084A7DD2FA1ECE7A',
secret='<SECRET>')
shinyapps::setAccountInfo(name='keexa', token='6807B369CA25F3D7084A7DD2FA1ECE7A', secret='E62WhRh8alo74W9AQyKHDUTtLSq8AC2+ngbZQVu/')
library(shinyapps)
shinyapps::deployApp('~/Desktop/my_project/')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
shiny::runApp('Desktop/my_project')
sample(1:10)
sample(1)
sample(1)
sample(23)
sample(1)
sample(1)
sample(1)
sample(1,1)
sample(1,3)
?sample
sample(1,2)
sample(1,2, replace=TRUE)
sample(1,2, replace=TRUE)
sample(1,2, replace=TRUE)
sample(199,1, replace=TRUE)
sample(199,1, replace=TRUE)
sample(199,1, replace=TRUE)
sample(199,1, replace=TRUE)
sample(199,1, replace=FALSE)
sample(199,1, replace=FALSE)
sample(199,1, replace=FALSE)
sample(199,1, replace=FALSE)
Here is an example of a plot, the red line shows the standard deviation
source('~/Desktop/exploratory2/plot1.R')
source('~/Desktop/exploratory2/plot2.R')
>par
?par
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,1,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,1,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,5,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,0,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,0,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,0,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,0,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,0,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,0,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,0,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
clear
reset
rm(list = ls())
# 2 - Have total emissions from PM2.5 decreased in the Baltimore City, Maryland (fips == "24510") from 1999 to 2008? Use the base plotting system to make a plot answering this question.
rm(list = ls())
setwd("/Users/bonifazi/Desktop/exploratory2/exdata-data-NEI_data")
# Loading data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
new_data <- subset(NEI[NEI$fips=="24510",], select=c(year, Emissions))
# Summing by year
total_emissions <- as.matrix(aggregate(new_data$Emissions, by=list(new_data$year), sum))
colnames(total_emissions) <- c("year", "Emissions")
# Drawing the plot
png("./plot2.png", width = 480, height = 480)
par(mar = c(5,15,4,4) + 0.1, mgp=c(3,0,0))
mp <- barplot(total_emissions[,2],
col=rainbow(4),
cex.axis=0.5,
axes = FALSE,
main ="Total emissions in Baltimore City from PM2.5",
xlab = "Year", ylab = "PM 2.5 emission (tons)")
axis(1, at=mp, labels=total_emissions[,1])
max_unit <- signif(max(total_emissions[,2]), 1)
options(scipen=999)
scales <- seq(from=0, to=max_unit, by=max_unit / 6)
axis(2, at=scales, labels=scales, las=1)
# Saving to png file
dev.off()
